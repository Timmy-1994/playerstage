plugins {
	id 'org.springframework.boot' version '2.5.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
apply from: '/gradle/dependencies.gradle'

group = 'com.playerstage'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	mybatisGenerator
}

repositories {
	mavenCentral()
}

dependencies {
	
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
	implementation 'net.sf.json-lib:json-lib:2.4:jdk15'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:${generatorVersion}'
	mybatisGenerator 'mysql:mysql-connector-java:${mysqlVersion}'
	mybatisGenerator 'tk.mybatis:mapper:${mybatisMapperVersion}'

	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
}
def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/mybatis/jdbc.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}
task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = this.modelPackage
	ant.properties['mapperPackage'] = this.mapperPackage
	ant.properties['sqlMapperPackage'] = this.sqlMapperPackage
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true,
			configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}
test {
	useJUnitPlatform()
}
